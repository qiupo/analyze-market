name: Build Cross-Platform Packages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ta-lib
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create main entry file
      run: |
        cat > main.py << 'EOF'
        #!/usr/bin/env python3
        """
        BandMaster Pro 主入口文件
        """
        
        import os
        import sys
        import subprocess
        import webbrowser
        import time
        import socket
        from pathlib import Path
        
        def find_available_port(start_port=8501, max_port=8600):
            """查找可用端口"""
            for port in range(start_port, max_port):
                try:
                    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                        s.bind(('localhost', port))
                        return port
                except OSError:
                    continue
            return start_port
        
        def main():
            """主函数"""
            print("=" * 60)
            print("🚀 BandMaster Pro - 智策波段交易助手")
            print("=" * 60)
            
            # 获取可用端口
            port = find_available_port()
            
            print(f"📡 启动服务...")
            print(f"🌐 访问地址: http://localhost:{port}")
            print("=" * 60)
            
            # 获取应用文件路径
            if getattr(sys, 'frozen', False):
                # 打包环境
                base_path = sys._MEIPASS
                app_path = os.path.join(base_path, 'src', 'app.py')
            else:
                # 开发环境
                app_path = os.path.join('src', 'app.py')
            
            try:
                # 启动Streamlit
                cmd = [
                    sys.executable, '-m', 'streamlit', 'run', app_path,
                    '--server.port', str(port),
                    '--server.headless', 'true',
                    '--browser.gatherUsageStats', 'false'
                ]
                
                print("⏳ 正在启动应用...")
                process = subprocess.Popen(cmd)
                
                # 等待启动
                time.sleep(3)
                
                # 打开浏览器
                webbrowser.open(f'http://localhost:{port}')
                print("✅ 应用已启动")
                print("\\n按 Ctrl+C 停止应用")
                
                try:
                    process.wait()
                except KeyboardInterrupt:
                    print("\\n🛑 正在停止应用...")
                    process.terminate()
                    print("✅ 应用已停止")
                    
            except Exception as e:
                print(f"❌ 启动失败: {e}")
                input("按回车键退出...")
        
        if __name__ == "__main__":
            main()
        EOF
    
    - name: Build with PyInstaller
      run: |
        if [ "$RUNNER_OS" = "Windows" ]; then
          pyinstaller --onefile --console --name=BandMasterPro --distpath=dist --workpath=build --specpath=. --clean --add-data=src;src --hidden-import=streamlit --hidden-import=akshare --hidden-import=pandas --hidden-import=numpy --hidden-import=plotly --hidden-import=talib main.py
        else
          pyinstaller --onefile --console --name=BandMasterPro --distpath=dist --workpath=build --specpath=. --clean --add-data=src:src --hidden-import=streamlit --hidden-import=akshare --hidden-import=pandas --hidden-import=numpy --hidden-import=plotly --hidden-import=talib main.py
        fi
    
    - name: Create launcher scripts
      run: |
        mkdir -p dist
        
        if [ "$RUNNER_OS" = "Windows" ]; then
          # Windows batch file
          cat > dist/启动应用.bat << 'EOF'
          @echo off
          title BandMaster Pro - 智策波段交易助手
          echo.
          echo ========================================
          echo   BandMaster Pro - 智策波段交易助手
          echo ========================================
          echo.
          echo 正在启动应用...
          echo.
          
          if exist "BandMasterPro.exe" (
              start /wait BandMasterPro.exe
          ) else (
              echo 错误: 找不到 BandMasterPro.exe
              echo 请确保文件在同一目录下
              pause
          )
          EOF
        else
          # Shell script for Linux/macOS
          cat > dist/启动应用.sh << 'EOF'
          #!/bin/bash
          echo "========================================"
          echo "  BandMaster Pro - 智策波段交易助手"
          echo "========================================"
          echo
          echo "正在启动应用..."
          echo
          
          if [ -f "./BandMasterPro" ]; then
              chmod +x ./BandMasterPro
              ./BandMasterPro
          else
              echo "错误: 找不到 BandMasterPro"
              echo "请确保文件在同一目录下"
              read -p "按回车键退出..."
          fi
          EOF
          
          chmod +x dist/启动应用.sh
        fi
    
    - name: Create README
      run: |
        if [ "$RUNNER_OS" = "Windows" ]; then
          PLATFORM="Windows"
          EXT=".exe"
          SCRIPT="启动应用.bat"
        elif [ "$RUNNER_OS" = "macOS" ]; then
          PLATFORM="macOS"
          EXT=""
          SCRIPT="./启动应用.sh"
        else
          PLATFORM="Linux"
          EXT=""
          SCRIPT="./启动应用.sh"
        fi
        
        cat > dist/README.md << EOF
        # BandMaster Pro - 智策波段交易助手 ($PLATFORM版本)
        
        ## 📦 打包版本说明
        
        这是 BandMaster Pro 的独立打包版本，无需安装 Python 环境即可直接运行。
        
        ## 🚀 快速启动
        
        ### $PLATFORM 系统
        1. 双击 \`$SCRIPT\` 或直接运行 \`BandMasterPro$EXT\`
        2. 等待应用启动（首次启动可能需要10-30秒）
        3. 浏览器会自动打开应用界面
        
        ## 📊 功能特色
        
        - **智能波段识别**: 多周期协同分析
        - **六维信号验证**: 趋势、动量、量能、资金、形态、环境
        - **精准买卖点**: 基于量化模型的决策矩阵
        - **动态仓位管理**: 底仓+加仓+补仓+T+0策略
        - **完整风控体系**: 止盈、止损、时间、紧急四重保护
        
        ## 🔧 使用说明
        
        1. 在左侧输入6位股票代码（如：000001）
        2. 选择分析周期
        3. 可选择设置持仓信息进行个性化分析
        4. 点击"开始分析"查看完整报告
        
        ## ⚠️ 注意事项
        
        1. **首次启动**: 可能需要较长时间，请耐心等待
        2. **网络连接**: 需要网络连接获取股票数据
        3. **防火墙**: 部分防火墙可能阻止应用启动，请添加信任
        4. **端口占用**: 如果8501端口被占用，应用会自动寻找其他可用端口
        
        ## 🛠️ 故障排除
        
        ### 启动失败
        - 检查是否有足够的磁盘空间（至少100MB）
        - 尝试以管理员权限运行
        - 临时关闭杀毒软件
        
        ### 浏览器未打开
        - 手动打开浏览器访问控制台显示的地址
        - 通常为: http://localhost:8501
        
        ### 数据获取失败
        - 检查网络连接
        - 确认股票代码格式正确（6位数字）
        
        ## 📞 技术支持
        
        如遇问题请检查：
        1. 系统兼容性
        2. 网络连接状态
        3. 防火墙设置
        4. 磁盘空间
        
        ---
        
        **免责声明**: 本工具仅供学习研究使用，不构成投资建议。投资有风险，决策需谨慎。
        EOF
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: BandMasterPro-${{ matrix.os }}
        path: dist/
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/BandMasterPro-ubuntu-latest/*
          artifacts/BandMasterPro-windows-latest/*
          artifacts/BandMasterPro-macos-latest/*
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## 🎉 BandMaster Pro 跨平台发布
          
          本次发布包含以下平台的可执行文件：
          
          - **Windows**: BandMasterPro.exe + 启动应用.bat
          - **Linux**: BandMasterPro + 启动应用.sh  
          - **macOS**: BandMasterPro + 启动应用.sh
          
          ### 📦 使用说明
          
          1. 下载对应平台的压缩包
          2. 解压到任意目录
          3. 运行启动脚本或直接运行可执行文件
          4. 等待应用启动，浏览器会自动打开
          
          ### 🔧 系统要求
          
          - Windows 10/11 (x64)
          - Ubuntu 18.04+ / CentOS 7+
          - macOS 10.14+ (Intel/Apple Silicon)
          
          ### ⚠️ 注意事项
          
          - 首次启动可能需要10-30秒
          - 需要网络连接获取股票数据
          - 建议关闭杀毒软件或添加信任
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 